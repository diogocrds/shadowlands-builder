{"version":3,"sources":["components/Class.js","components/Classes.js","components/Watchlist.js","App.js","serviceWorker.js","index.js"],"names":["Class","props","leggos","leggosData","filter","c","class","handleInputChange","event","console","log","target","value","name","onChange","className","spec","specs","map","key","items","i","id","desc","slots","s","onClick","Classes","useState","singleClass","setSingleClass","classList","setClassList","useEffect","length","classesData","doc","classTable","watchlistItem","setWatchlistItem","Watchlist","list","watchlist","setWatchlist","item","App","resetWatchlist","setResetWatchlist","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7f6222c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport leggosData from './data/legendaries.json'\r\n\r\nfunction Class(props) {\r\n  const leggos = leggosData.filter((c) => c.class === props.class)\r\n\r\n  function handleInputChange(event) {\r\n    console.log('target value: ' + event.target.value)\r\n    console.log('target name:' + event.target.name)\r\n    props.onChange({ name: event.target.value, class: event.target.name })\r\n  }\r\n\r\n  return (\r\n    <div className='single-class'>\r\n      <h2>\r\n        {props.class} - {props.spec}\r\n      </h2>\r\n      {leggos[0].specs\r\n        .filter((c) => c.name === 'General' || c.name === props.spec)\r\n        .map((c) => (\r\n          <div key={props.class + c.name} className='single-spec'>\r\n            <h4>{c.name}</h4>\r\n            {c.items.map((i) => (\r\n              <div key={i.id} className='single-spec__leggo'>\r\n                <div className='single-spec__content'>\r\n                  <div className='name'>{i.name}</div>\r\n                  <div className='desc'>{i.desc}</div>\r\n                  <div className='slots'>\r\n                    <span>Slots:</span>\r\n                    {i.slots.map((s) => (\r\n                      <div className='slot__name' key={i.id + s}>\r\n                        {s}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  className='single-spec__btn'\r\n                  value={i.name}\r\n                  name={props.class}\r\n                  onClick={handleInputChange}\r\n                >\r\n                  Add to list\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Class\r\n","import React, { useState, useEffect } from 'react'\r\nimport Class from './Class'\r\nimport classesData from './data/classes.json'\r\n\r\nfunction Classes(props) {\r\n  const [singleClass, setSingleClass] = useState('')\r\n  const [classList, setClassList] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (classList.length === 0) {\r\n      setClassList(\r\n        classesData.map((doc) => ({\r\n          id: doc.id,\r\n          name: doc.name,\r\n          specs: doc.specs,\r\n        }))\r\n      )\r\n    }\r\n  }, [classList])\r\n\r\n  const classTable = (\r\n    <div className='classes'>\r\n      <h3>Classes</h3>\r\n      {classList\r\n        .filter(\r\n          (c) =>\r\n            c.name === 'Death Knight' ||\r\n            c.name === 'Demon Hunter' ||\r\n            c.name === 'Druid'\r\n        )\r\n        .map((c) => (\r\n          <div key={c.id} className='classes__item'>\r\n            <div className='name'>{c.name}</div>\r\n            <div className='specs'>\r\n              {c.specs.map((spec) => (\r\n                <div\r\n                  className='spec__name'\r\n                  key={c.id + spec}\r\n                  onClick={() => setSingleClass({ class: c.name, spec: spec })}\r\n                >\r\n                  {spec}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  )\r\n  const [watchlistItem, setWatchlistItem] = useState(null)\r\n  useEffect(() => {\r\n    if (watchlistItem !== null) {\r\n      console.log('classes add n: ' + watchlistItem.name)\r\n      console.log('classes add c: ' + watchlistItem.class)\r\n      props.onChange(watchlistItem)\r\n      setWatchlistItem(null)\r\n    }\r\n  }, [watchlistItem, props])\r\n\r\n  return (\r\n    <div className='class__content'>\r\n      {singleClass ? (\r\n        <>\r\n          <Class\r\n            class={singleClass.class}\r\n            spec={singleClass.spec}\r\n            onChange={(event) => setWatchlistItem(event)}\r\n          />\r\n          <button onClick={() => setSingleClass(null)} className='btn__back'>\r\n            Back\r\n          </button>\r\n        </>\r\n      ) : (\r\n        classTable\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Classes\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Watchlist(props) {\r\n  const [watchlist, setWatchlist] = useState(props.list)\r\n  useEffect(() => {\r\n    if (props.list.length > watchlist.length || props.list.length === 0)\r\n      setWatchlist(props.list)\r\n  }, [props.list, watchlist])\r\n\r\n  function handleResetWatchlist(event) {\r\n    props.onChange(event)\r\n    setWatchlist([])\r\n  }\r\n  return (\r\n    <div>\r\n      <div className='watchlist'>\r\n        <h3>Watchlist</h3>\r\n        {watchlist.length > 0 ? (\r\n          watchlist.map((item) => (\r\n            <div key={item.id} className='watchlist__item'>\r\n              <div className='name'>{item.name}</div>\r\n              <div className='class'>{item.class}</div>\r\n              <div className='icon'>\r\n                <button>x</button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <>Empty list</>\r\n        )}\r\n        <div className='watchlist__btn'>\r\n          <button>Generate</button>\r\n          <button value={true} onClick={handleResetWatchlist}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Watchlist\r\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Classes from './components/Classes'\nimport Watchlist from './components/Watchlist'\n\nfunction App() {\n  const [watchlist, setWatchlist] = useState([])\n  const [watchlistItem, setWatchlistItem] = useState(null)\n  const [resetWatchlist, setResetWatchlist] = useState(false)\n\n  useEffect(() => {\n    if (resetWatchlist) {\n      console.log('reset')\n      setWatchlist([])\n      setWatchlistItem(null)\n      console.log(watchlist)\n      setResetWatchlist(false)\n    }\n  }, [resetWatchlist, watchlist, watchlistItem])\n\n  useEffect(() => {\n    if (watchlistItem !== null) {\n      console.log('item add to the list n: ' + watchlistItem.name)\n      console.log('item add to the list c: ' + watchlistItem.class)\n      setWatchlist(\n        watchlist.concat({\n          id: watchlist.length,\n          name: watchlistItem.name,\n          class: watchlistItem.class,\n        })\n      )\n      setWatchlistItem(null)\n    }\n  }, [watchlistItem, watchlist])\n\n  return (\n    <div className='App'>\n      <header className='app__header'>\n        <h1>Shadowlands Builder</h1>\n      </header>\n      <div className='app__content'>\n        <Classes onChange={(event) => setWatchlistItem(event)} />\n        <Watchlist\n          list={watchlist}\n          onChange={(event) => setResetWatchlist(event)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}